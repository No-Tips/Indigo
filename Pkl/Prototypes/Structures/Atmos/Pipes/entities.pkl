amends ".../Typings.pkl"

import ".../Typings.pkl"
import ".../constants.pkl"

local typealias PipeLayer = constants.PipeLayer
local const commonParent = "GasPipeBase"

content {
    new EntityPrototype {
        parent { "BaseItem" }
        id = commonParent
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new VisibilityComponent {
                layer = 1
            }
            new ItemComponent {
                size = "Normal"
            }
            new TransformComponent {
                anchored = true
            }
            new DamageableComponent {
                damageContainer = "Inorganic"
                damageModifierSet = "Metallic"
            }
            new SubFloorHideComponent {
                visibleLayers = Set("enum.SubfloorLayers.FirstLayer")
            }
            new CollideOnAnchorComponent {}
            new AnchorableComponent {}
            new RotatableComponent {}
            new RCDDeconstructableComponent {
                cost = 1
                delay = 2.0
                fx = "EffectRCDDeconstruct2"
                rpd = true
            }
            new DestructibleComponent {
                thresholds {
                    // For nukes
                    new {
                        trigger = new DamageTrigger {
                            damage = 200
                        }
                        behaviors {
                            new DoActsBehavior {
                                acts = "Destruction"
                            }
                        }
                    }
                    // Regular damage trigger (replace with broken pipe)
                    new {
                        trigger = new DamageTrigger {
                            damage = 100
                        }
                        behaviors {
                            new PlaySoundBehavior {
                                sound = new SoundCollectionSpecifier {
                                    collection = "MetalBreak"
                                    params {
                                        volume = -8.0
                                    }
                                }
                            }
                            new SpawnEntitiesBehavior {
                                spawn {
                                    ["GasPipeBroken"] {
                                        min = 1
                                        max = 1
                                    }
                                }
                                offset = 0.0
                            }
                            new DoActsBehavior {
                                acts = "Breakage"
                            }
                        }
                    }
                }
            }
            new SpriteComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                drawdepth = "ThinPipe"
                netsync = false
                visible = false
                noRot = true
            }
            new AppearanceComponent {}
            new PipeColorVisualsComponent {}
            new AtmosPipeConnectionVisualsComponent {}
            new NodeContainerComponent {}
            new AtmosUnsafeUnanchorComponent {}
            new AtmosPipeColorComponent {}
            new AtmosPipeComponent {}
            new AtmosMonitoringConsoleDeviceComponent {}
            new TagComponent {
                tags = Set("Pipe")
            }
            new PhysicsComponent {
                canCollide = false
                bodyType = "Static"
            }
            new StaticPriceComponent {
                price = 11.0
            }
        }
    }

    // Goobstation - Allow device-on-pipe stacking

    new EntityPrototype {
        parent { commonParent }
        id = "GasPipeNoOverlap"
        `abstract` = true
        components {
            new PipeRestrictOverlapComponent {}
        }
    }

    // Note: The PipeDirection of the PipeNode should be the south-facing version, because the entity starts at an angle of 0 (south)

    // Half

    new EntityPrototype {
        parent { "GasPipeNoOverlap" }
        id = "GasPipeHalf"
        `abstract` = true
        components {
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "South"
                        layer = 2
                    }
                }
            }
            new IconComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeHalf"
            }
        }
    }

    generatePipeHalf(0)
    generatePipeHalf(1)
    generatePipeHalf(2)
    generatePipeHalf(3)
    generatePipeHalf(4)

    new EntityPrototype {
        parent { commonParent }
        id = "GasPipeStraight"
        `abstract` = true
        components {
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "Longitudinal"
                        layer = 2
                    }
                }
            }
            new IconComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeStraight"
            }
            new ItemComponent {
                size = "Normal"
                storedSprite = new Rsi {
                    sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                    state = "storageStraight"
                }
                shape {
                    Typings.Box2i(0, 0, 0, 2)
                }
            }
            new MeleeWeaponComponent {
                attackRate = 1.0
                damage {
                    types {
                        ["Blunt"] = 8.0
                    }
                }
                soundHit = new SoundCollectionSpecifier {
                    collection = "MetalThud"
                }
            }
        }
    }

    generatePipeStraight(0)
    generatePipeStraight(1)
    generatePipeStraight(2)
    generatePipeStraight(3)
    generatePipeStraight(4)

    new EntityPrototype {
        parent { "GasPipeNoOverlap" }
        id = "GasPipeBend"
        `abstract` = true
        components {
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "SWBend"
                        layer = 2
                    }
                }
            }
            new IconComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeBend"
            }
            new ItemComponent {
                size = "Small"
                shape {
                    Typings.Box2i(0, 0, 1, 0)
                    Typings.Box2i(1, 1, 1, 1)
                }
                heldPrefix = "Bend"
                storedSprite = new Rsi {
                    sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                    state = "storageBend"
                }
            }
            new MeleeWeaponComponent {
                wideAnimationRotation = 180.0
                attackRate = 1.0
                damage {
                    types {
                        ["Blunt"] = 6.0
                    }
                }
                soundHit = new SoundCollectionSpecifier {
                    collection = "MetalThud"
                }
            }
            new DamageOtherOnHitComponent {
                damage {
                    types {
                        ["Blunt"] = 3.0
                    }
                }
            }
        }
    }

    generatePipeBend(0)
    generatePipeBend(1)
    generatePipeBend(2)
    generatePipeBend(3)
    generatePipeBend(4)

    new EntityPrototype {
        parent { "GasPipeNoOverlap" }
        id = "GasPipeTJunction"
        `abstract` = true
        components {
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "TSouth"
                        layer = 2
                    }
                }
            }
            new IconComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeTJunction"
            }
            new ItemComponent {
                size = "Normal"
                shape {
                    Typings.Box2i(0, 0, 2, 0)
                    Typings.Box2i(1, 1, 1, 1)
                }
                heldPrefix = "TJunction"
                storedSprite = new Rsi {
                    sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                    state = "storageTJunction"
                }
            }
            new MeleeWeaponComponent {
                wideAnimationRotation = 90.0
                attackRate = 0.75
                damage {
                    types {
                        ["Blunt"] = 10.0
                    }
                }
                soundHit = new SoundCollectionSpecifier {
                    collection = "MetalThud"
                }
            }
        }
    }

    generatePipeTJunction(0)
    generatePipeTJunction(1)
    generatePipeTJunction(2)
    generatePipeTJunction(3)
    generatePipeTJunction(4)

    new EntityPrototype {
        parent { "GasPipeNoOverlap" }
        id = "GasPipeFourway"
        `abstract` = true
        components {
            new TransformComponent {
                noRot = true
            }
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "Fourway"
                        layer = 2
                    }
                }
            }
            new IconComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeFourway"
            }
            new ItemComponent {
                size = "Normal"
                shape {
                    Typings.Box2i(1, 0, 1, 2)
                    Typings.Box2i(0, 1, 2, 1)
                }
                heldPrefix = "Fourway"
            }
            new MeleeWeaponComponent {
                wideAnimationRotation = 90.0
                attackRate = 0.75
                damage {
                    types {
                        ["Blunt"] = 10.0
                    }
                }
                soundHit = new SoundCollectionSpecifier {
                    collection = "MetalThud"
                }
            }
        }
    }

    generatePipeFourway(0)
    generatePipeFourway(1)
    generatePipeFourway(2)
    generatePipeFourway(3)
    generatePipeFourway(4)

    new EntityPrototype {
        parent { "GasPipeNoOverlap" }
        id = "GasPipeBroken"
        components {
            new SpriteComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                drawdepth = "ThinPipe"
                state = "pipeBroken"
                layers {
                    new {
                        state = "pipeBroken"
                        map = Set("enum.PipeVisualLayers.Pipe")
                    }
                }
            }
            new ConstructionComponent {
                graph = "GasPipe"
                node = "broken"
            }
            new DestructibleComponent {
                // Override parent to avoid recursive destruction
                thresholds {
                    new {
                        trigger = new DamageTrigger {
                            damage = 100
                        }
                        behaviors {
                            new DoActsBehavior {
                                acts = "Destruction"
                            }
                        }
                    }
                }
            }
        }
    }
}

local const function generatePipeHalf(l: PipeLayer): EntityPrototype = new EntityPrototype {
    parent { "GasPipeHalf" }
    id = "GasPipeHalf\(l)"
    suffix = "Half, \(l)"
    components {
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "South"
                    layer = l
                }
            }
        }
        new SpriteComponent {
            layers {
                new {
                    state = "pipeHalf_\(l)"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
            }
        }
        new ConstructionComponent {
            graph = "GasPipe"
            node = "half\(l)"
        }
    }
}

local const function generatePipeStraight(l: PipeLayer): EntityPrototype = new EntityPrototype {
    parent { "GasPipeStraight" }
    id = "GasPipeStraight\(l)"
    suffix = "Straight, \(l)"
    components {
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "Longitudinal"
                    layer = l
                }
            }
        }
        new SpriteComponent {
            layers {
                new {
                    state = "pipeStraight_\(l)"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
            }
        }
        new ConstructionComponent {
            graph = "GasPipe"
            node = "straight\(l)"
        }
    }
}

local const function generatePipeBend(l: PipeLayer): EntityPrototype = new EntityPrototype {
    parent { "GasPipeBend" }
    id = "GasPipeBend\(l)"
    suffix = "Bend, \(l)"
    components {
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "SWBend"
                    layer = l
                }
            }
        }
        new SpriteComponent {
            layers {
                new {
                    state = "pipeBend_\(l)"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
            }
        }
        new ConstructionComponent {
            graph = "GasPipe"
            node = "bend\(l)"
        }
    }
}

local const function generatePipeTJunction(l: PipeLayer): EntityPrototype = new EntityPrototype {
    parent { "GasPipeTJunction" }
    id = "GasPipeTJunction\(l)"
    suffix = "T-Junction, \(l)"
    components {
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "TSouth"
                    layer = l
                }
            }
        }
        new SpriteComponent {
            layers {
                new {
                    state = "pipeTJunction_\(l)"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
            }
        }
        new ConstructionComponent {
            graph = "GasPipe"
            node = "tjunction\(l)"
        }
    }
}

local const function generatePipeFourway(l: PipeLayer): EntityPrototype = new EntityPrototype {
    parent { "GasPipeFourway" }
    id = "GasPipeFourway\(l)"
    suffix = "Fourway, \(l)"
    components {
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "Fourway"
                    layer = l
                }
            }
        }
        new SpriteComponent {
            layers {
                new {
                    state = "pipeFourway_\(l)"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
            }
        }
        new ConstructionComponent {
            graph = "GasPipe"
            node = "fourway\(l)"
        }
    }
}
