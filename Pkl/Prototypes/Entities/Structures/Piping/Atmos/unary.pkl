amends ".../Typings.pkl"

import ".../Typings.pkl"
import "constants.pkl"

local typealias PipeLayer = constants.PipeLayer
local const commonParent = "GasUnaryBase"

content {
    new EntityPrototype {
        parent { "GasPipeBase" }
        id = commonParent
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new AtmosDeviceComponent {}
            new TagComponent {
                tags = Set("Unstackable")
            }
            new SubFloorHideComponent {
                blockInteractions = false
                blockAmbience = false
            }
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "South"
                        layer = 2
                    }
                }
            }
            new CollideOnAnchorComponent {}
        }
    }

    new EntityPrototype {
        parent {
            commonParent
            "AirSensorBase"
        }
        id = "GasVentPump"
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new ApcPowerReceiverComponent {}
            new ExtensionCableReceiverComponent {}
            new DeviceNetworkComponent {
                prefix = "device-address-prefix-vent"
            }
            new TagComponent {
                tags = Set("GasVent", "Unstackable")
            }
            new WiredNetworkComponent {}
            new DeviceNetworkRequiresPowerComponent {}
            new AtmosDeviceComponent {}
            new SpriteComponent {
                netsync = false
                drawdepth = "FloorObjects"
                sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
                layers {
                    new {
                        state = "pipe_2"
                        sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                        map = Set("enum.PipeVisualLayers.Pipe")
                    }
                    new {
                        state = "vent_off"
                        map = Set("enabled", "enum.SubfloorLayers.FirstLayer")
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.VentPumpVisuals.State"] {
                        ["enabled"] {
                            ["Off"] {
                                state = "vent_off"
                            }
                            ["In"] {
                                state = "vent_in"
                            }
                            ["Out"] {
                                state = "vent_out"
                            }
                            ["Welded"] {
                                state = "vent_welded"
                            }
                        }
                    }
                }
            }
            new GasVentPumpComponent {}
            new VentCritterSpawnLocationComponent {}
            new AmbientSoundComponent {
                enabled = false
                volume = -12.0
                range = 5.0
                sound = new SoundPathSpecifier {
                    path = "/Audio/Ambience/Objects/gas_vent.ogg"
                }
            }
            new WeldableComponent {}
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "GasVentOpening"
            }
        }
    }

    generateVentPump(0)
    generateVentPump(1)
    generateVentPump(2)
    generateVentPump(3)
    generateVentPump(4)

    // Vent Pump subtypes

    generateVentPumpHigh(0)
    generateVentPumpHigh(1)
    generateVentPumpHigh(2)
    generateVentPumpHigh(3)
    generateVentPumpHigh(4)

    new EntityPrototype {
        parent { commonParent }
        id = "GasPassiveVent"
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new SpriteComponent {
                netsync = false
                drawdepth = "FloorObjects"
                sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
                layers {
                    new {
                        state = "pipe_2"
                        sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                        map = Set("enum.PipeVisualLayers.Pipe")
                    }
                    new {
                        state = "vent_off"
                        map = Set("enum.SubfloorLayers.FirstLayer")
                    }
                }
            }
            new GasPassiveVentComponent {}
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "GasVentOpening"
            }
        }
    }

    generatePassiveVent(0)
    generatePassiveVent(1)
    generatePassiveVent(2)
    generatePassiveVent(3)
    generatePassiveVent(4)

    new EntityPrototype {
        parent {
            commonParent
            "AirSensorBase"
        }
        id = "GasVentScrubber"
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new ApcPowerReceiverComponent {}
            new ExtensionCableReceiverComponent {}
            new DeviceNetworkComponent {
                prefix = "device-address-prefix-scrubber"
            }
            new DeviceNetworkRequiresPowerComponent {}
            new TagComponent {
                tags = Set("GasScrubber")
            }
            new SpriteComponent {
                netsync = false
                drawdepth = "FloorObjects"
                sprite = "/Textures/Structures/Piping/Atmospherics/scrubber.rsi"
                layers {
                    new {
                        state = "pipe_2"
                        sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                        map = Set("enum.PipeVisualLayers.Pipe")
                    }
                    new {
                        state = "scrub_off"
                        map = Set("enabled", "enum.SubfloorLayers.FirstLayer")
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.ScrubberVisuals.State"] {
                        ["enabled"] {
                            ["Off"] {
                                state = "scrub_off"
                            }
                            ["Scrub"] {
                                state = "scrub_on"
                            }
                            ["Siphon"] {
                                state = "scrub_purge"
                            }
                            ["WideScrub"] {
                                state = "scrub_wide"
                            }
                            ["Welded"] {
                                state = "scrub_welded"
                            }
                        }
                    }
                }
            }
            new AtmosDeviceComponent {}
            new GasVentScrubberComponent {}
            new AmbientSoundComponent {
                enabled = false
                volume = -12.0
                range = 5.0
                sound = new SoundPathSpecifier {
                    path = "/Audio/Ambience/Objects/gas_vent.ogg"
                }
            }
            new WeldableComponent {}
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "GasVentScrubber"
            }
        }
    }

    generateVentScrubber(0)
    generateVentScrubber(1)
    generateVentScrubber(2)
    generateVentScrubber(3)
    generateVentScrubber(4)

    // Vent Scrubber subtypes

    generateVentScrubberHigh(0)
    generateVentScrubberHigh(1)
    generateVentScrubberHigh(2)
    generateVentScrubberHigh(3)
    generateVentScrubberHigh(4)

    new EntityPrototype {
        parent { commonParent }
        id = "GasOutletInjector"
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new SpriteComponent {
                drawdepth = "FloorObjects"
                netsync = false
                sprite = "/Textures/Structures/Piping/Atmospherics/outletinjector.rsi"
                layers {
                    new {
                        state = "pipeHalf_2"
                        sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                        map = Set("enum.PipeVisualLayers.Pipe")
                    }
                    new {
                        state = "injector"
                        map = Set("enum.SubfloorLayers.FirstLayer")
                    }
                    new {
                        state = "injector-unshaded"
                        map = Set("enum.LightLayers.Unshaded")
                        color = "#990000"
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.OutletInjectorVisuals.Enabled"] {
                        ["unshaded"] {
                            ["True"] {
                                color = "#5eff5e"
                            }
                            ["False"] {
                                color = "#990000"
                            }
                        }
                    }
                }
            }
            new AppearanceComponent {}
            new PipeColorVisualsComponent {}
            new GasOutletInjectorComponent {}
            new SubFloorHideComponent {
                visibleLayers = Set("enum.SubfloorLayers.FirstLayer", "enum.LightLayers.Unshaded")
            }
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "GasVentOpening"
            }
        }
    }

    generateOutletInjector(0)
    generateOutletInjector(1)
    generateOutletInjector(2)
    generateOutletInjector(3)
    generateOutletInjector(4)

    // Outlet injector subtypes

    generateOutletInjectorHigh(0)
    generateOutletInjectorHigh(1)
    generateOutletInjectorHigh(2)
    generateOutletInjectorHigh(3)
    generateOutletInjectorHigh(4)

    new EntityPrototype {
        parent {
            "BaseMachinePowered"
            "ConstructibleMachine"
        }
        id = "BaseGasThermoMachine"
        `abstract` = true
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new SpriteComponent {
                netsync = false
                sprite = "/Textures/Structures/Piping/Atmospherics/thermomachine.rsi"
                snapCardinals = true
            }
            new AppearanceComponent {}
            new PipeColorVisualsComponent {}
            new RotatableComponent {}
            new GasThermoMachineComponent {}
            new AtmosPipeColorComponent {}
            new AtmosDeviceComponent {}
            new UserInterfaceComponent {
                interfaces {
                    ["enum.ThermomachineUiKey.Key"] {
                        type = "GasThermomachineBoundUserInterface"
                    }
                }
            }
            new ActivatableUIComponent {
                inHandsOnly = false
                key = "enum.ThermomachineUiKey.Key"
            }
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "South"
                        layer = 2
                    }
                }
            }
            new TransformComponent {
                noRot = false
            }
            new DeviceNetworkComponent {
                deviceNetId = "AtmosDevices"
                receiveFrequencyId = "AtmosMonitor"
                transmitFrequencyId = "AtmosMonitor"
                sendBroadcastAttemptEvent = true
                examinableAddress = true
            }
            new PowerSwitchComponent {}
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "Thermoregulator"
            }
        }
    }

    new EntityPrototype {
        parent { "BaseGasThermoMachine" }
        id = "GasThermoMachineFreezer"
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new StationAiWhitelistComponent {}
            new SpriteComponent {
                granularLayersRendering = true
                layers {
                    new {
                        state = "freezerOff"
                        map = Set("enum.PowerDeviceVisualLayers.Powered")
                    }
                    new {
                        state = "freezerPanelOpen"
                        map = Set("enum.WiresVisualLayers.MaintenancePanel")
                    }
                    new {
                        state = "pipe"
                        map = Set("enum.PipeVisualLayers.Pipe")
                        renderingStrategy = "Default"
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.PowerDeviceVisuals.Powered"] {
                        ["enum.PowerDeviceVisualLayers.Powered"] {
                            ["True"] {
                                state = "freezerOn"
                            }
                            ["False"] {
                                state = "freezerOff"
                            }
                        }
                    }
                }
            }
            new GasThermoMachineComponent {
                coefficientOfPerformance = -3.9
            }
            new ApcPowerReceiverComponent {
                powerDisabled = true
            }
            new MachineComponent {
                board = "ThermomachineFreezerMachineCircuitBoard"
            }
            new DeviceNetworkComponent {
                prefix = "device-address-prefix-freezer"
            }
            new StealTargetComponent {
                stealGroup = "FreezerHeater"
            }
        }
    }

    new EntityPrototype {
        parent { "GasThermoMachineFreezer" }
        id = "GasThermoMachineFreezerEnabled"
        suffix = "Enabled"
        components {
            new GasThermoMachineComponent {}
            new ApcPowerReceiverComponent {
                powerDisabled = false
            }
        }
    }

    new EntityPrototype {
        parent { "BaseGasThermoMachine" }
        id = "GasThermoMachineHeater"
        placement {
            mode = "SnapgridCenter"
        }
        components {
            new StationAiWhitelistComponent {}
            new SpriteComponent {
                granularLayersRendering = true
                layers {
                    new {
                        state = "heaterOff"
                        map = Set("enum.PowerDeviceVisualLayers.Powered")
                    }
                    new {
                        state = "heaterPanelOpen"
                        map = Set("enum.WiresVisualLayers.MaintenancePanel")
                    }
                    new {
                        state = "pipe"
                        map = Set("enum.PipeVisualLayers.Pipe")
                        renderingStrategy = "Default"
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.PowerDeviceVisuals.Powered"] {
                        ["enum.PowerDeviceVisualLayers.Powered"] {
                            ["True"] {
                                state = "heaterOn"
                            }
                            ["False"] {
                                state = "heaterOff"
                            }
                        }
                    }
                }
            }
            new GasThermoMachineComponent {
                coefficientOfPerformance = 0.95
            }
            new ApcPowerReceiverComponent {
                powerDisabled = true
            }
            new MachineComponent {
                board = "ThermomachineHeaterMachineCircuitBoard"
            }
            new DeviceNetworkComponent {
                prefix = "device-address-prefix-heater"
            }
            new StealTargetComponent {
                stealGroup = "FreezerHeater"
            }
        }
    }

    new EntityPrototype {
        parent { "GasThermoMachineHeater" }
        id = "GasThermoMachineHeaterEnabled"
        suffix = "Enabled"
        components {
            new GasThermoMachineComponent {}
            new ApcPowerReceiverComponent {
                powerDisabled = false
            }
        }
    }

    new EntityPrototype {
        parent { "GasThermoMachineFreezer" }
        id = "GasThermoMachineHellfireFreezer"
        components {
            new SpriteComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/hellfirethermomachine.rsi"
            }
            new GasThermoMachineComponent {
                minTemperature = 23.15
                heatCapacity = 40000.0
                energyLeakPercentage = 0.15
            }
            new MachineComponent {
                board = "HellfireFreezerMachineCircuitBoard"
            }
        }
    }

    new EntityPrototype {
        parent { "GasThermoMachineHeater" }
        id = "GasThermoMachineHellfireHeater"
        components {
            new SpriteComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/hellfirethermomachine.rsi"
            }
            new GasThermoMachineComponent {
                maxTemperature = 1193.15
                heatCapacity = 40000.0
                energyLeakPercentage = 0.15
            }
            new MachineComponent {
                board = "HellfireHeaterMachineCircuitBoard"
            }
        }
    }

    new EntityPrototype {
        parent {
            "BaseMachinePowered"
            "SmallConstructibleMachine"
        }
        id = "BaseGasCondenser"
        placement {
            mode = "SnapgrindCenter"
        }
        components {
            new SpriteComponent {
                sprite = "/Textures/Structures/Piping/Atmospherics/condenser.rsi"
                snapCardinals = true
                granularLayersRendering = true
                layers {
                    new {
                        state = "off"
                        map = Set("enum.PowerDeviceVisualLayers.Powered")
                    }
                    new {
                        state = "panel"
                        map = Set("enum.WiresVisualLayers.MaintenancePanel")
                    }
                    new {
                        state = "pipe"
                        map = Set("enum.PipeVisualLayers.Pipe")
                        renderingStrategy = "Default"
                    }
                    new {
                        state = "fill-1"
                        map = Set("enum.SolutionContainerLayers.Fill")
                        visible = false
                    }
                }
            }
            new GenericVisualizerComponent {
                visuals {
                    ["enum.PowerDeviceVisuals.Powered"] {
                        ["enum.PowerDeviceVisualLayers.Powered"] {
                            ["True"] {
                                state = "on"
                            }
                            ["False"] {
                                state = "off"
                            }
                        }
                    }
                }
            }
            new SolutionContainerVisualsComponent {
                maxFillLevels = 7
                fillBaseName = "fill-"
            }
            new AppearanceComponent {}
            new PipeColorVisualsComponent {}
            new RotatableComponent {}
            new GasCondenserComponent {}
            new AtmosPipeColorComponent {}
            new AtmosDeviceComponent {}
            new ApcPowerReceiverComponent {
                powerLoad = 10000.0
            }
            new MachineComponent {
                board = "CondenserMachineCircuitBoard"
            }
            new WiresPanelComponent {}
            new WiresVisualsComponent {}
            new DestructibleComponent {
                thresholds {
                    new {
                        trigger = new DamageTrigger {
                            damage = 200
                        }
                        behaviors {
                            new DoActsBehavior {
                                acts = "Destruction"
                            }
                        }
                    }
                    new {
                        trigger = new DamageTrigger {
                            damage = 100
                        }
                        behaviors {
                            new DoActsBehavior {
                                acts = "Destruction"
                            }
                            new SpillBehavior {
                                solution = "tank"
                            }
                            new PlaySoundBehavior {
                                sound = new SoundCollectionSpecifier {
                                    collection = "MetalBreak"
                                }
                            }
                        }
                    }
                }
            }
            new NodeContainerComponent {
                nodes {
                    ["pipe"] = new PipeNode {
                        nodeGroupID = "Pipe"
                        pipeDirection = "South"
                        layer = 2
                    }
                }
            }
            new TransformComponent {
                noRot = false
            }
            new SolutionContainerManagerComponent {
                solutions {
                    ["tank"] {
                        maxVol = 400.0
                    }
                }
            }
            new MixableSolutionComponent {
                solution = "tank"
            }
            new DrainableSolutionComponent {
                solution = "tank"
            }
            new ExaminableSolutionComponent {
                solution = "tank"
            }
            new PowerSwitchComponent {}
            new AtmosMonitoringConsoleDeviceComponent {
                navMapBlip = "Thermoregulator"
            }
        }
    }
}

local const function generateVentPump(l: PipeLayer): EntityPrototype = new {
    parent { "GasVentPump" }
    id = "GasVentPump\(l)"
    suffix = "\(l)"
    components {
        new SpriteComponent {
            layers {
                new {
                    state = "pipe_\(l)"
                    sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
                new {
                    state = "vent_off"
                    map = Set("enabled", "enum.SubfloorLayers.FirstLayer")
                }
            }
        }
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "South"
                    layer = l
                }
            }
        }
        new ConstructionComponent {
            graph = "GasUnary"
            node = "ventpump\(l)"
        }
    }
}

local const function generateVentPumpHigh(l: PipeLayer): EntityPrototype = new {
    parent { "GasVentPump\(l)" }
    id = "GasVentPumpHighFlow\(l)"
    placement {
        mode = "SnapgridCenter"
    }
    components {
        new GasVentPumpComponent {
            maxPressure = 13500.0
            PumpPower = 6.0
        }
    }
}

local const function generatePassiveVent(l: PipeLayer): EntityPrototype = new {
    parent { "GasPassiveVent" }
    id = "GasPassiveVent\(l)"
    suffix = "\(l)"
    components {
        new SpriteComponent {
            layers {
                new {
                    state = "pipe_\(l)"
                    sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
                new {
                    state = "vent_off"
                    map = Set("enum.SubfloorLayers.FirstLayer")
                    offset = Typings.Vector2(-0.1, -0.1)
                }
            }
        }
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "South"
                    layer = l
                }
            }
        }
        new ConstructionComponent {
            graph = "GasUnary"
            node = "passivevent\(l)"
        }
    }
}

local const function generateVentScrubber(l: PipeLayer): EntityPrototype = new {
    parent { "GasVentScrubber" }
    id = "GasVentScrubber\(l)"
    suffix = "\(l)"
    components {
        new SpriteComponent {
            layers {
                new {
                    state = "pipe_\(l)"
                    sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
                new {
                    state = "scrub_off"
                    map = Set("enabled", "enum.SubfloorLayers.FirstLayer")
                }
            }
        }
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "South"
                    layer = l
                }
            }
        }
        new ConstructionComponent {
            graph = "GasUnary"
            node = "ventscrubber\(l)"
        }
    }
}

local const function generateVentScrubberHigh(l: PipeLayer): EntityPrototype = new {
    parent { "GasVentScrubber\(l)" }
    id = "GasVentScrubberHighFlow\(l)"
    placement {
        mode = "SnapgridCenter"
    }
    components {
        new GasVentScrubberComponent {
            maxPressure = 13500.0
            maxTransferRate = 600.0
        }
    }
}

local const function generateOutletInjector(l: PipeLayer): EntityPrototype = new {
    parent { "GasOutletInjector" }
    id = "GasOutletInjector\(l)"
    placement {
        mode = "SnapgridCenter"
    }
    components {
        new SpriteComponent {
            drawdepth = "FloorObjects"
            netsync = false
            sprite = "/Textures/Structures/Piping/Atmospherics/outletinjector.rsi"
            layers {
                new {
                    state = "pipe_\(l)"
                    sprite = "/Textures/Structures/Piping/Atmospherics/generic_device.rsi"
                    map = Set("enum.PipeVisualLayers.Pipe")
                }
                new {
                    state = "injector"
                    map = Set("enum.SubfloorLayers.FirstLayer")
                }
                new {
                    state = "injector-unshaded"
                    map = Set("enum.LightLayers.Unshaded")
                    color = "#990000"
                }
            }
        }
        new NodeContainerComponent {
            nodes {
                ["pipe"] = new PipeNode {
                    nodeGroupID = "Pipe"
                    pipeDirection = "South"
                    layer = l
                }
            }
        }
        new ConstructionComponent {
            graph = "GasUnary"
            node = "outletinjector\(l)"
        }
    }
}

local const function generateOutletInjectorHigh(l: PipeLayer): EntityPrototype = new {
    parent { "GasOutletInjector\(l)" }
    id = "GasOutletInjectorHighFlow\(l)"
    placement {
        mode = "SnapgridCenter"
    }
    components {
        new GasOutletInjectorComponent {
            maxTransferRate = 600.0
            maxPressure = 13500.0
        }
    }
}
