amends ".../Typings.pkl"

import ".../Entities/Structures/Piping/Atmos/constants.pkl"

content {
    generatePressurePumpConstruction(0)
    generatePressurePumpConstruction(1)
    generatePressurePumpConstruction(2)
    generatePressurePumpConstruction(3)
    generatePressurePumpConstruction(4)

    generateVolumePumpConstruction(0)
    generateVolumePumpConstruction(1)
    generateVolumePumpConstruction(2)
    generateVolumePumpConstruction(3)
    generateVolumePumpConstruction(4)

    generatePassiveGateConstruction(0)
    generatePassiveGateConstruction(1)
    generatePassiveGateConstruction(2)
    generatePassiveGateConstruction(3)
    generatePassiveGateConstruction(4)

    generateValveConstruction(0)
    generateValveConstruction(1)
    generateValveConstruction(2)
    generateValveConstruction(3)
    generateValveConstruction(4)

    new ConstructionPrototype {
        id = "SignalControlledValve"
        name = "signal valve"
        description = "Valve controlled by signal inputs."
        graph = "GasBinary"
        startNode = "start"
        targetNode = "signalvalve"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
            state = "pumpSignalValve"
        }
        layers {
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeStraight"
            }
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
                state = "pumpSignalValve"
            }
        }
        conditions {
            new NoUnstackableInTile {}
        }
    }

    new ConstructionPrototype {
        id = "GasPort"
        name = "connector port"
        description = "For connecting portable devices related to atmospherics control."
        graph = "GasBinary"
        startNode = "start"
        targetNode = "port"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/gascanisterport.rsi"
            state = "gasCanisterPort"
        }
        layers {
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeHalf"
            }
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/gascanisterport.rsi"
                state = "gasCanisterPort"
            }
        }
        conditions {
            new NoUnstackableInTile {}
        }
    }

    new ConstructionPrototype {
        id = "GasDualPortVentPump"
        name = "dual-port air vent"
        description = "Has a valve and a pump attached to it. There are two ports, one is an input for releasing air, the other is an output when siphoning."
        graph = "GasBinary"
        startNode = "start"
        targetNode = "dualportventpump"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "vent_off"
        }
        layers {
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeStraight"
            }
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
                state = "vent_off"
            }
        }
    }

    new ConstructionPrototype {
        id = "HeatExchanger"
        name = "radiator"
        description = "Transfers heat between the pipe and its surroundings."
        graph = "GasBinary"
        startNode = "start"
        targetNode = "radiator"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/heatexchanger.rsi"
            state = "heStraight"
        }
    }

    new ConstructionPrototype {
        id = "GasPipeAdapter"
        name = "pipe adapter"
        description = "suppose to switch between pipe layers"
        graph = "GasBinary"
        startNode = "start"
        targetNode = "gaspipeadapter"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pipeAdapter.rsi"
            state = "base"
        }
    }
}

local const function generatePressurePumpConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasPressurePump\(l)"
    name = "gas pump, \(l)"
    description = "A pump that moves gas by pressure"
    graph = "GasBinary"
    startNode = "start"
    targetNode = "pressurepump\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
        state = "pumpPressure"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
            state = "pipeStraight_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
            state = "pumpPressure"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}

local const function generateVolumePumpConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasVolumePump\(l)"
    name = "volumetric gas pump, \(l)"
    description = "A pump that moves gas by volume"
    graph = "GasBinary"
    startNode = "start"
    targetNode = "volumepump\(l)"
    category = "construction-category-utilities"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
        state = "pumpVolume"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
            state = "pipeStraight_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
            state = "pumpVolume"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}

local const function generatePassiveGateConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasPassiveGate\(l)"
    name = "passive gate, \(l)"
    description = "A one-way air valve that does not require power."
    graph = "GasBinary"
    startNode = "start"
    targetNode = "passivegate\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
        state = "pumpPassiveGate"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
            state = "pipeStraight"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
            state = "pumpPassiveGate"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}

local const function generateValveConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasValve\(l)"
    name = "manual valve, \(l)"
    description = "A pipe with a valve that can be used to disable the flow of gas through it."
    graph = "GasBinary"
    startNode = "start"
    targetNode = "valve\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
        state = "pumpManualValve"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
            state = "pipeStraight_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/pump.rsi"
            state = "pumpManualValve"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}
