amends ".../Typings.pkl"

import ".../Entities/Structures/Piping/Atmos/constants.pkl"

content {
    generateVentPumpConstruction(0)
    generateVentPumpConstruction(1)
    generateVentPumpConstruction(2)
    generateVentPumpConstruction(3)
    generateVentPumpConstruction(4)

    generatePassiveVentPumpConstruction(0)
    generatePassiveVentPumpConstruction(1)
    generatePassiveVentPumpConstruction(2)
    generatePassiveVentPumpConstruction(3)
    generatePassiveVentPumpConstruction(4)

    generateVentScrubberConstruction(0)
    generateVentScrubberConstruction(1)
    generateVentScrubberConstruction(2)
    generateVentScrubberConstruction(3)
    generateVentScrubberConstruction(4)

    new ConstructionPrototype {
        id = "GasOutletInjector"
        name = "air injector"
        description = "Injects air into the atmosphere"
        graph = "GasUnary"
        startNode = "start"
        targetNode = "outletinjector"
        category = "construction-category-utilities"
        placementMode = "SnapgridCenter"
        canBuildInImpassable = false
        icon = new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/outletinjector.rsi"
            state = "injector"
        }
        layers {
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/pipe.rsi"
                state = "pipeHalf"
            }
            new Rsi {
                sprite = "/Textures/Structures/Piping/Atmospherics/outletinjector.rsi"
                state = "injector"
            }
        }
        conditions {
            new NoUnstackableInTile {}
        }
    }
}

local const function generateVentPumpConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasVentPump\(l)"
    name = "air vent, \(l)"
    description = "Pumps gas into the room"
    graph = "GasUnary"
    startNode = "start"
    targetNode = "ventpump\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
        state = "vent_off"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "pipe_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "vent_off"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}

local const function generatePassiveVentPumpConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasPassiveVent\(l)"
    name = "passive vent, \(l)"
    description = "Unpowered vent that equalises gases on both sides."
    graph = "GasUnary"
    startNode = "start"
    targetNode = "passivevent\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
        state = "vent_off"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "pipe_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "vent_off"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}

local const function generateVentScrubberConstruction(l: constants.PipeLayer): ConstructionPrototype = new {
    id = "GasVentScrubber\(l)"
    name = "air scrubber, \(l)"
    description = "Sucks gas into connected pipes."
    graph = "GasUnary"
    startNode = "start"
    targetNode = "ventscrubber\(l)"
    category = "construction-category-utilities"
    placementMode = "SnapgridCenter"
    canBuildInImpassable = false
    icon = new Rsi {
        sprite = "/Textures/Structures/Piping/Atmospherics/scrubber.rsi"
        state = "scrub_off"
    }
    layers {
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/vent.rsi"
            state = "pipe_\(l)"
        }
        new Rsi {
            sprite = "/Textures/Structures/Piping/Atmospherics/scrubber.rsi"
            state = "scrub_off"
        }
    }
    conditions {
        new NoUnstackableInTile {}
    }
}
