amends ".../Typings.pkl"

import ".../Entities/Structures/Piping/Atmos/constants.pkl"

content {
    new ConstructionGraphPrototype {
        id = "GasUnary"
        start = "start"
        graph {
            new {
                node = "start".toString()
                edges {
                    generateVentPumpEdge(0)
                    generateVentPumpEdge(1)
                    generateVentPumpEdge(2)
                    generateVentPumpEdge(3)
                    generateVentPumpEdge(4)

                    generatePassiveVentEdge(0)
                    generatePassiveVentEdge(1)
                    generatePassiveVentEdge(2)
                    generatePassiveVentEdge(3)
                    generatePassiveVentEdge(4)

                    generateVentScrubberEdge(0)
                    generateVentScrubberEdge(1)
                    generateVentScrubberEdge(2)
                    generateVentScrubberEdge(3)
                    generateVentScrubberEdge(4)

                    generateOutletInjectorEdge(0)
                    generateOutletInjectorEdge(1)
                    generateOutletInjectorEdge(2)
                    generateOutletInjectorEdge(3)
                    generateOutletInjectorEdge(4)
                }
            }

            generateVentPumpNode(0)
            generateVentPumpNode(1)
            generateVentPumpNode(2)
            generateVentPumpNode(3)
            generateVentPumpNode(4)

            generatePassiveVentNode(0)
            generatePassiveVentNode(1)
            generatePassiveVentNode(2)
            generatePassiveVentNode(3)
            generatePassiveVentNode(4)

            generateVentScrubberNode(0)
            generateVentScrubberNode(1)
            generateVentScrubberNode(2)
            generateVentScrubberNode(3)
            generateVentScrubberNode(4)

            generateOutletInjectorNode(0)
            generateOutletInjectorNode(1)
            generateOutletInjectorNode(2)
            generateOutletInjectorNode(3)
            generateOutletInjectorNode(4)
        }
    }
}

local const function generateVentPumpEdge(l: constants.PipeLayer): ConstructionGraphEdge = new {
    to = "ventpump\(l)"
    steps {
        new MaterialConstructionGraphStep {
            material = "Steel"
            amount = 2
            doAfter = 1.0
        }
    }
}

local const function generateVentPumpNode(l: constants.PipeLayer): ConstructionGraphNode = new {
    node = "ventpump\(l)"
    entity = new StaticNodeEntity {
        id = "GasVentPump\(l)"
    }
    edges {
        new ConstructionGraphEdge {
            to = "start"
            conditions {
                new EntityAnchored {
                    anchored = false
                }
            }
            completed {
                new SpawnPrototype {
                    prototype = "SheetSteel1"
                    amount = 2
                }
                new DeleteEntity {}
            }
            steps {
                new ToolConstructionGraphStep {
                    tool = "Screwing"
                    doAfter = 1.0
                }
                new ToolConstructionGraphStep {
                    tool = "Welding"
                    doAfter = 1.0
                }
            }
        }
    }
}

local const function generatePassiveVentEdge(l: constants.PipeLayer): ConstructionGraphEdge = new {
    to = "passivevent\(l)"
    steps {
        new MaterialConstructionGraphStep {
            material = "Steel"
            amount = 2
            doAfter = 1.0
        }
    }
}

local const function generatePassiveVentNode(l: constants.PipeLayer): ConstructionGraphNode = new {
    node = "passivevent\(l)"
    entity = new StaticNodeEntity {
        id = "GasPassiveVent\(l)"
    }
    edges {
        new {
            to = "start"
            conditions {
                new EntityAnchored {
                    anchored = false
                }
            }
            completed {
                new SpawnPrototype {
                    prototype = "SheetSteel1"
                    amount = 2
                }
                new DeleteEntity {}
            }
            steps {
                new ToolConstructionGraphStep {
                    tool = "Screwing"
                    doAfter = 1.0
                }
                new ToolConstructionGraphStep {
                    tool = "Welding"
                    doAfter = 1.0
                }
            }
        }
    }
}

local const function generateVentScrubberEdge(l: constants.PipeLayer): ConstructionGraphEdge = new {
    to = "ventscrubber\(l)"
    steps {
        new MaterialConstructionGraphStep {
            material = "Steel"
            amount = 2
            doAfter = 1.0
        }
    }
}

local const function generateOutletInjectorEdge(l: constants.PipeLayer): ConstructionGraphEdge = new {
    to = "outletinjector\(l)"
    steps {
        new MaterialConstructionGraphStep {
            material = "Steel"
            amount = 2
            doAfter = 1.0
        }
    }
}

local const function generateVentScrubberNode(l: constants.PipeLayer): ConstructionGraphNode = new {
    node = "ventscrubber\(l)"
    entity = new StaticNodeEntity {
        id = "GasVentScrubber\(l)"
    }
    edges {
        new {
            to = "start"
            conditions {
                new EntityAnchored {
                    anchored = false
                }
            }
            completed {
                new SpawnPrototype {
                    prototype = "SheetSteel1"
                    amount = 2
                }
                new DeleteEntity {}
            }
            steps {
                new ToolConstructionGraphStep {
                    tool = "Screwing"
                    doAfter = 1.0
                }
                new ToolConstructionGraphStep {
                    tool = "Welding"
                    doAfter = 1.0
                }
            }
        }
    }
}

local const function generateOutletInjectorNode(l: constants.PipeLayer): ConstructionGraphNode = new {
    node = "outletinjector\(l)"
    entity = new StaticNodeEntity {
        id = "GasOutletInjector\(l)"
    }
    edges {
        new {
            to = "start"
            conditions {
                new EntityAnchored {
                    anchored = false
                }
            }
            completed {
                new SpawnPrototype {
                    prototype = "SheetSteel1"
                    amount = 2
                }
                new DeleteEntity {}
            }
            steps {
                new ToolConstructionGraphStep {
                    tool = "Welding"
                    doAfter = 1.0
                }
            }
        }
    }
}
