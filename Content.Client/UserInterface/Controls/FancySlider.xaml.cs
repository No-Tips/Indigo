// Copyright (C) 2025 Igor Spichkin

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Range = Robust.Client.UserInterface.Controls.Range;


namespace Content.Client.UserInterface.Controls;


[GenerateTypedNameReferences]
public sealed partial class FancySlider : Range
{
    public event Action<FancySlider>? OnGrabbed;
    public event Action<FancySlider>? OnReleased;

    public bool Grabbed  { get;                           private set; }
    public bool Disabled { get => SliderGrabber.Disabled; set => SliderGrabber.Disabled = value; }

    public override float Value
    {
        get => base.Value;
        set
        {
            base.Value = value;
            UpdateValue();
        }
    }

    public FancySlider()
    {
        RobustXamlLoader.Load(this);

        MouseFilter = MouseFilterMode.Stop;

        LayoutContainer.SetAnchorBottom(SliderGrabber, 1.0f);
        // LayoutContainer.SetGrowHorizontal(SliderGrabber, LayoutContainer.GrowDirection.Both);
        // LayoutContainer.SetGrowVertical(SliderGrabber, LayoutContainer.GrowDirection.Both);
        // LayoutContainer.SetAnchorAndMarginPreset(SliderGrabber, LayoutContainer.LayoutPreset.Wide);
        LayoutContainer.SetAnchorPreset(SliderPanel, LayoutContainer.LayoutPreset.Wide);
        // LayoutContainer.SetPosition(SliderGrabber, GlobalRect.TopRight);

        SliderGrabber.OnKeyBindDown += OnSliderGrabberKeyBindDown;
        SliderGrabber.OnKeyBindUp   += OnSliderGrabberKeyBindUp;
    }

    public override void SetValueWithoutEvent(float newValue)
    {
        base.SetValueWithoutEvent(newValue);

        UpdateValue();
    }

    private void UpdateValue()
    {
        var ratio  = GetAsRatio();
        var margin = (Width - SliderGrabber.DesiredSize.X) * ratio + SliderGrabber.DesiredSize.X / 2;

        LayoutContainer.SetMarginLeft(SliderGrabber, margin);
        LayoutContainer.SetMarginRight(SliderGrabber, margin);
    }

    protected override void Resized()
    {
        base.Resized();

        UpdateValue();
    }

    private void OnSliderGrabberKeyBindDown(GUIBoundKeyEventArgs ev)
    {
        if (ev.Function != EngineKeyFunctions.UIClick || Disabled)
            return;

        Grabbed = true;
        OnGrabbed?.Invoke(this);
    }

    private void OnSliderGrabberKeyBindUp(GUIBoundKeyEventArgs ev)
    {
        if (ev.Function != EngineKeyFunctions.UIClick || !Grabbed)
            return;

        Grabbed = false;
        OnReleased?.Invoke(this);
    }

    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        if (!Grabbed)
            return;

        HandlePositionChange(args.RelativePosition);
    }

    private void HandlePositionChange(Vector2 position)
    {
        var ratio        = position.X / Width;
        SetAsRatio(ratio);
    }
}
