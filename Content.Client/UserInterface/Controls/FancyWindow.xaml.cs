using System.Numerics;
using Content.Client.Guidebook;
using Content.Shared.Guidebook;
using Content.Shared.InterfaceGuidelines;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;


namespace Content.Client.UserInterface.Controls;


[GenerateTypedNameReferences, Virtual,]
public partial class FancyWindow : BaseWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = null!;

    public TitlebarStyle TitlebarStyle
    {
        get => _titlebarStyle;
        set
        {
            _titlebarStyle = value;
            UpdateAppearance();
        }
    }

    private       GuidebookSystem? _guidebookSystem;
    private const int              DragMarginSize = 7;

    public string? Title
    {
        get => WindowTitle.Text;
        set => WindowTitle.Text = value;
    }

    public List<ProtoId<GuideEntryPrototype>>? HelpGuidebookIds
    {
        get => _helpGuidebookIds;
        set
        {
            _helpGuidebookIds = value;
            UpdateAppearance();
        }
    }

    private List<ProtoId<GuideEntryPrototype>>? _helpGuidebookIds;
    private TitlebarStyle                       _titlebarStyle = TitlebarStyle.Default;

    public FancyWindow()
    {
        RobustXamlLoader.Load(this);

        CloseButton.OnPressed += _ => Close();
        HelpButton.OnPressed  += _ => Help();

        CloseButton.Icon           =  SymbolIcons.Circle;
        CloseButton.OnMouseEntered += static ev => ((FancyButton) ev.SourceControl).Icon = SymbolIcons.Cancel;
        CloseButton.OnMouseExited  += static ev => ((FancyButton) ev.SourceControl).Icon = SymbolIcons.Circle;

        HelpButton.OnMouseEntered += ev =>
        {
            ((FancyButton) ev.SourceControl).Icon = _helpGuidebookIds is null ? " " : SymbolIcons.Help;
        };
        HelpButton.OnMouseExited += ev =>
        {
            ((FancyButton) ev.SourceControl).Icon = _helpGuidebookIds is null ? " " : SymbolIcons.Circle;
        };

        XamlChildren = ContentsContainer.Children;

        UpdateAppearance();
    }

    public void Help()
    {
        if (HelpGuidebookIds is null)
            return;

        _guidebookSystem ??= _entitySystemManager.GetEntitySystem<GuidebookSystem>();
        _guidebookSystem.OpenHelp(HelpGuidebookIds);
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        var mode = DragMode.Move;

        if (!Resizable)
            return mode;

        if (relativeMousePos.Y < DragMarginSize)
            mode = DragMode.Top;
        else if (relativeMousePos.Y > Size.Y - DragMarginSize)
            mode = DragMode.Bottom;

        if (relativeMousePos.X < DragMarginSize)
            mode |= DragMode.Left;
        else if (relativeMousePos.X > Size.X - DragMarginSize)
            mode |= DragMode.Right;

        return mode;
    }

    private void UpdateAppearance()
    {
        switch (_titlebarStyle)
        {
            case TitlebarStyle.Default:
                WindowTitlebar.PanelOverride = new RectBox
                {
                    Rounding        = new(14.0f, 14.0f, 0.0f, 0.0f),
                    Borders         = new(Colors.WindowTitlebarBorder, new(2.0f)),
                    InsetBorders    = new(Colors.WindowTitlebarInsetBorder, new(2.0f)),
                    BackgroundColor = Colors.WindowTitlebarBackground
                };
                WindowTitlebarContainer.Margin = new(12.0f, 6.0f);
                ContentsContainer.Margin       = new(12.0f);

                break;
            case TitlebarStyle.Inlined:
                WindowTitlebar.PanelOverride   = null;
                WindowTitlebarContainer.Margin = new(12.0f, 12.0f);
                ContentsContainer.Margin       = new(12.0f, 0.0f, 12.0f, 12.0f);

                break;
            case TitlebarStyle.InlinedCompact:
                WindowTitlebar.PanelOverride   = null;
                WindowTitlebarContainer.Margin = new(12.0f, 6.0f);
                ContentsContainer.Margin       = new(12.0f, 0.0f, 12.0f, 12.0f);

                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        HelpButton.Icon = _helpGuidebookIds is null ? " " : SymbolIcons.Circle;
    }
}
