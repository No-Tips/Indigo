using System.Numerics;
using Content.Client.Guidebook;
using Content.Shared.Guidebook;
using Content.Shared.InterfaceGuidelines;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;


namespace Content.Client.UserInterface.Controls;


[GenerateTypedNameReferences, Virtual,]
public partial class FancyWindow : BaseWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = null!;

    private       GuidebookSystem? _guidebookSystem;
    private const int              DragMarginSize = 7;

    public FancyWindow()
    {
        RobustXamlLoader.Load(this);

        CloseButton.OnPressed += _ => Close();
        HelpButton.OnPressed  += _ => Help();

        CloseButton.ButtonLabel.SetOnlyStyleClass(UIStyleClasses.FancyWindowTitlebarIcon);
        CloseButton.ButtonLabel.FontColorOverride = Colors.WindowTitlebarCloseButton;

        HelpButton.ButtonLabel.SetOnlyStyleClass(UIStyleClasses.FancyWindowTitlebarIcon);
        HelpButton.ButtonLabel.FontColorOverride = Colors.WindowTitlebarHelpButton;

        XamlChildren = ContentsContainer.Children;
    }

    public string? Title
    {
        get => WindowTitle.Text;
        set => WindowTitle.Text = value;
    }

    private List<ProtoId<GuideEntryPrototype>>? _helpGuidebookIds;

    public List<ProtoId<GuideEntryPrototype>>? HelpGuidebookIds
    {
        get => _helpGuidebookIds;
        set
        {
            _helpGuidebookIds   = value;
            HelpButton.Disabled = _helpGuidebookIds == null;
            HelpButton.Visible  = !HelpButton.Disabled;
        }
    }

    public void Help()
    {
        if (HelpGuidebookIds is null)
            return;

        _guidebookSystem ??= _entitySystemManager.GetEntitySystem<GuidebookSystem>();
        _guidebookSystem.OpenHelp(HelpGuidebookIds);
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        var mode = DragMode.Move;

        if (!Resizable)
            return mode;

        if (relativeMousePos.Y < DragMarginSize)
            mode = DragMode.Top;
        else if (relativeMousePos.Y > Size.Y - DragMarginSize)
            mode = DragMode.Bottom;

        if (relativeMousePos.X < DragMarginSize)
            mode |= DragMode.Left;
        else if (relativeMousePos.X > Size.X - DragMarginSize)
            mode |= DragMode.Right;

        return mode;
    }
}
