// Copyright (C) 2025 Igor Spichkin

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

using Content.Client.UserInterface.Controls;
using Content.Shared.InterfaceGuidelines;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;


namespace Content.Client.Atmos.UI;


[GenerateTypedNameReferences]
public sealed partial class PipeLayerSelectorControl : BoxContainer
{
    public int SelectedLayer { get; private set; }

    public event Action<int>? OnLayerSelected;

    private readonly ButtonGroup _group = new();

    public PipeLayerSelectorControl()
    {
        RobustXamlLoader.Load(this);

        for (var i = 0; i < 5; i++)
        {
            var layer = i;
            var style = layer switch
                {
                    0 => ButtonStyle.OpenRight,
                    4 => ButtonStyle.OpenLeft,
                    _ => ButtonStyle.OpenBoth
                }
                ;
            var button = new FancyButton
            {
                Text  = i.ToString(),
                Style = style,
                Group = _group
            };

            button.ToggleMode = true;
            button.Pressed    = SelectedLayer == layer;
            button.OnPressed += _ =>
            {
                SelectedLayer = layer;
                OnLayerSelected?.Invoke(SelectedLayer);
            };

            AddChild(button);
        }
    }

    public void SetSelectedLayer(int layer)
    {
        SelectedLayer = layer;

        UpdateButtons();
    }

    private void UpdateButtons()
    {
        var idx = 0;
        foreach (var child in Children)
        {
            if (child is not FancyButton button)
                continue;

            button.Pressed =  SelectedLayer == idx;
            idx            += 1;
        }
    }
}
