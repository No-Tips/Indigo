using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio.Components;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;


namespace Content.Client.Audio.Jukebox;


[GenerateTypedNameReferences]
public sealed partial class JukeboxMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = null!;
    private readonly AudioSystem _audioSystem;

    /// <summary>
    /// Are we currently 'playing' or paused for the play / pause button.
    /// </summary>
    private bool _playState;

    /// <summary>
    /// True if playing, false if paused.
    /// </summary>
    public event Action<bool>? OnPlayPressed;

    public event Action? OnStopPressed;
    public event Action<string>? OnSongSelected;
    public event Action<float>? SetTime;

    private EntityUid? _audio;

    private float _lockTimer;

    public JukeboxMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _audioSystem = _entityManager.System<AudioSystem>();

        MusicList.OnItemSelected += args =>
        {
            var entry = MusicList[args.ItemIndex];

            if (entry.Metadata is not string trackId)
                return;

            OnSongSelected?.Invoke(trackId);
        };

        PlayButton.OnPressed += _ =>
        {
            OnPlayPressed?.Invoke(!_playState);
        };

        StopButton.OnPressed += _ =>
        {
            OnStopPressed?.Invoke();
        };
        PlaybackSlider.OnReleased += PlaybackSliderKeyUp;

        SetPlayPauseButton(isPlaying: _audioSystem.IsPlaying(_audio), force: true);
    }

    public void SetAudioStream(EntityUid? fromEntity) => _audio = fromEntity;

    private void PlaybackSliderKeyUp(Slider args)
    {
        SetTime?.Invoke(PlaybackSlider.Value);
        _lockTimer = 0.5f;
    }

    /// <summary>
    /// Re-populates the list of jukebox prototypes available.
    /// </summary>
    public void Populate(IEnumerable<JukeboxTrack> with)
    {
        MusicList.Clear();

        foreach (var track in with)
            MusicList.AddItem(track.ToString(), metadata: track.Id);
    }

    public void SetPlayPauseButton(bool isPlaying, bool force = false)
    {
        if (_playState == isPlaying && !force)
            return;

        _playState = isPlaying;

        if (isPlaying)
        {
            PlayButton.Text = Loc.GetString("jukebox-menu-buttonpause");

            return;
        }

        PlayButton.Text = Loc.GetString("jukebox-menu-buttonplay");
    }

    public void SetSelectedTrack(JukeboxTrack? fromTrack)
    {
        if (fromTrack is not null)
        {
            SongName.Text = fromTrack.Value.ToString();
            PlaybackSlider.MaxValue = (float) fromTrack.Value.Length.TotalSeconds;
        }
        else
            SongName.Text = "---";

        PlaybackSlider.SetValueWithoutEvent(0);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_lockTimer > 0f)
            _lockTimer -= args.DeltaSeconds;

        PlaybackSlider.Disabled = _lockTimer > 0f;

        DurationLabel.Text = _entityManager.TryGetComponent(_audio, out AudioComponent? audio)
            ? $@"{TimeSpan.FromSeconds(audio.PlaybackPosition):mm\:ss} / {_audioSystem.GetAudioLength(audio.FileName):mm\:ss}"
            : $"00:00 / 00:00";

        if (PlaybackSlider.Grabbed)
            return;

        if (audio != null || _entityManager.TryGetComponent(_audio, out audio))
            PlaybackSlider.SetValueWithoutEvent(audio.PlaybackPosition);
        else
            PlaybackSlider.SetValueWithoutEvent(0f);

        SetPlayPauseButton(isPlaying: _audioSystem.IsPlaying(_audio, audio));
    }
}
