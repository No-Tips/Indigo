using System.Numerics;
using Content.Client.ContextMenu.UI;
using Content.Client.InterfaceGuidelines;
using Content.Client.UserInterface.Controls;
using Content.Shared.InterfaceGuidelines;
using Content.Shared.Verbs;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;


namespace Content.Client.Verbs.UI;


/// <summary>
///     Slight extension of <see cref="ContextMenuElement"/> that provides constructors that take verbs or verb categories.
/// </summary>
public sealed partial class VerbMenuElement : ContextMenuElement
{
    // Setters to provide access to children generated by XAML.
    public bool IconVisible { set => Icon.Visible = value; }
    public bool TextVisible { set => ItemLabel.Visible = value; }

    // Top quality variable naming
    public readonly Verb? Verb;

    public VerbMenuElement(Verb verb) : base(verb.Text)
    {
        ToolTip  = verb.Message;
        Disabled = verb.Disabled;
        Verb     = verb;

        ItemLabel.SetOnlyStyleClass(verb.TextStyleClass);

        // There are no confirmations in debug fam.
        #if !DEBUG
            if (verb.ConfirmationPopup)
            {
                ExpansionIndicator.Visible = true;
            }
        #endif

        var entManager = IoCManager.Resolve<IEntityManager>();

        if (verb.GlyphIcon == null && verb.SpriteIcon == null && verb.IconEntity != null)
        {
            var spriteView = new SpriteView()
            {
                OverrideDirection = Direction.South,
                SetSize           = new Vector2(ElementHeight, ElementHeight),
            };
            spriteView.SetEntity(entManager.GetEntity(verb.IconEntity.Value));

            Icon.AddChild(spriteView);
            return;
        }

        if (verb.SpriteIcon is { } spriteIcon)
        {
            Icon.AddChild(
                new TextureRect
                {
                    Texture = entManager.System<SpriteSystem>().Frame0(spriteIcon),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered
                });
        }
        else if (verb.GlyphIcon is { } glyphIcon)
        {
            var label = new FancyIcon
            {
                Text      = glyphIcon,
                Align     = Label.AlignMode.Center,
                VAlign    = Label.VAlignMode.Center,
                TextStyle = TextStyle.Title2
            };

            Icon.AddChild(label);
        }
    }

    public VerbMenuElement(VerbCategory category, string styleClass) : base(category.Text)
    {
        ItemLabel.SetOnlyStyleClass(styleClass);

        if (category.SpriteIconIcon is { } spriteIcon)
        {
            Icon.AddChild(
                new TextureRect
                {
                    Texture = IoCManager.Resolve<IEntitySystemManager>()
                        .GetEntitySystem<SpriteSystem>()
                        .Frame0(spriteIcon),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered
                });
        }
        else if (category.GlypIcon is { } glyphIcon)
        {
            var label = new FancyIcon
            {
                Text      = glyphIcon,
                TextStyle = TextStyle.Title1
            };

            Icon.AddChild(label);
        }
    }
}
